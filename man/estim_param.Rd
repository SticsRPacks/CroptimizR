% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estim_param.R
\name{estim_param}
\alias{estim_param}
\title{main function for parameter estimation}
\usage{
estim_param(
  obs_list,
  crit_function = crit_log_cwss,
  model_function,
  model_options = NULL,
  optim_method = "nloptr.simplex",
  optim_options = NULL,
  param_info,
  forced_param_values = NULL,
  candidate_param = NULL,
  transform_var = NULL,
  transform_obs = NULL,
  transform_sim = NULL,
  satisfy_par_const = NULL,
  var = NULL,
  info_level = 1,
  info_crit_func = list(CroptimizR::BIC, CroptimizR::AICc, CroptimizR::AIC),
  var_names = lifecycle::deprecated()
)
}
\arguments{
\item{obs_list}{List of observed values to use for parameter estimation
A \verb{named list} (names = situations names) of data.frame containing
one column named Date with the dates (Date or POSIXct format) of the different observations
and one column per observed variables with either the measured values or NA, if
the variable is not observed at the given date.}

\item{crit_function}{Function implementing the criterion to optimize
(optional, see default value in the function signature). See
\href{https://sticsrpacks.github.io/CroptimizR/reference/ls_criteria.html}{here}
for more details about the list of proposed criteria.}

\item{model_function}{Crop Model wrapper function to use.}

\item{model_options}{List of options for the Crop Model wrapper (see help of
the Crop Model wrapper function used).}

\item{optim_method}{Name of the parameter estimation method to use (optional,
see default value in the function signature). For the moment, can be "simplex"
or "dreamzs". See \href{https://sticsrpacks.github.io/CroptimizR/articles/Available_parameter_estimation_algorithms.html}{here}
for a brief description and references on the available methods.}

\item{optim_options}{List of options of the parameter estimation method, containing:
\itemize{
\item \code{out_dir} Directory path where to write the optimization results (optional, default to \code{getwd()})
\item \code{ranseed} Set random seed so that each execution of estim_param give the same
results when using the same seed. If you want randomization, set it to NULL,
otherwise set it to a number of your choice (e.g. 1234) (optional, default to \code{getwd()})
\item specific options depending on the method used. Click on the links to see examples with the \href{https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_simple_case.html}{simplex}
and \href{https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_DREAM.html}{DreamZS} methods.
\item \code{path_results} \ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \code{path_results} is no longer supported, use \code{out_dir} instead.
}}

\item{param_info}{Information on the parameters to estimate.
Either
a list containing:
\itemize{
\item \code{ub} and \code{lb}, named vectors of upper and lower bounds (-Inf and Inf can be used if init_values is provided),
\item \code{init_values}, a data.frame containing initial
values to test for the parameters (optional, if not provided, or if less values
than number of repetitions of the minimization are provided, the, or part
of the, initial values will be randomly generated using LHS sampling within
parameter bounds).
}

or a named list containing for each parameter:
\itemize{
\item \code{sit_list}, the list of situations per group,
\item \code{ub} and \code{lb}, vectors of upper and lower bounds (one value per group),
\item \code{init_values}, the list of initial values per group  (data.frame, one column per group, optional).
(see \href{https://sticsrpacks.github.io/CroptimizR/articles/Parameter_estimation_Specific_and_Varietal.html}{here}
for an example)
}}

\item{forced_param_values}{Named vector or list, must contain the values (or
arithmetic expression, see details section) for the model parameters to force. The corresponding
values will be transferred to the model wrapper through its param_values argument
during the estimation process.
Should not include values for estimated parameters (i.e. parameters defined in
\code{param_info} argument), except if they are listed as candidate parameters (see
argument \code{candidate_param}).}

\item{candidate_param}{Names of the parameters, among those defined in the argument param_info,
that must only be considered as candidate for parameter estimation (see details section).}

\item{transform_var}{Named vector of functions to apply both on simulated and
observed variables. \code{transform_var=c(var1=log, var2=sqrt)} will for example
apply log-transformation on simulated and observed values of variable var1,
and square-root transformation on values of variable var2.}

\item{transform_obs}{User function for transforming observations before each criterion
evaluation (optional), see details section for more information.}

\item{transform_sim}{User function for transforming simulations before each criterion
evaluation  (optional), see details section for more information.}

\item{satisfy_par_const}{User function for including constraints on estimated
parameters (optional), see details section for more information.}

\item{var}{(optional) List of variables for which the wrapper must return results.
By default the wrapper is asked to simulate only the observed variables. However,
it may be useful to simulate also other variables, typically when transform_sim
and/or transform_obs functions are used. Note however that it is
active only if the model_function used handles this argument.}

\item{info_level}{(optional) Integer that controls the level of information returned and stored
by estim_param (in addition to the results automatically provided that depends on the method used).
Higher code give more details.
\itemize{
\item \code{0} to add nothing,
\item \code{1} to add criterion and parameters values, and constraint if satisfy_par_const is provided, for each evaluation
(element params_and_crit in the returned list),
\item \code{2} to add model results, after transformation if transform_sim is provided, and after intersection with observations,
i.e. as used to compute the criterion for each evaluation (element sim_intersect in the returned list),
\item \code{3} to add observations, after transformation if transform_obs is provided, and after intersection with simulations,
i.e. as used to compute the criterion for each evaluation (element obs_intersect in the returned list),
\item \code{4} to add all model wrapper results for each evaluation, and all transformations if transform_sim is provided.
(elements sim and sim_transformed in the returned list).
}}

\item{info_crit_func}{Function (or list of functions) to compute information criteria.
(optional, see default value in the function signature and \href{https://sticsrpacks.github.io/CroptimizR/reference/information_criteria.html}{here}
for more details about the list of proposed information criteria.).
Values of the information criteria will be stored in the returned list.
In case parameter selection is activated (i.e. if the argument candidate_param
is defined (see details section)), the first information criterion given will be used.
ONLY AVAILABLE FOR THE MOMENT FOR crit_function==crit_ols.}

\item{var_names}{\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#deprecated}{\figure{lifecycle-deprecated.svg}{options: alt='[Deprecated]'}}}{\strong{[Deprecated]}} \code{var_names} is no
longer supported, use \code{var} instead.}
}
\value{
prints, graphs and a list containing the results of the parameter estimation,
which content depends on the method used and on the values of the \code{info_level} argument.
All results are saved in the folder \code{optim_options$out_dir}.
}
\description{
main function for parameter estimation
}
\details{
If the \code{candidate_param} argument is given, a parameter selection procedure following
the AgMIP calibration phaseIII protocol will be performed:
The candidate parameters are added one by one (in the given order) to the parameters
that MUST be estimated (i.e. the one defined in param_info but not in candidate_param).
Each time a new candidate is added:
\itemize{
\item the parameter estimation is performed and an information criterion is computed (see argument info_crit_func)
\item if the information criterion is inferior to all the ones obtained before,
then the current candidate parameter is added to the list of parameters to estimate
The result includes a summary of all the steps (data.frame param_selection_steps).
}

The optional argument \code{transform_obs} must be a function with 4 arguments:
\itemize{
\item model_results: the list of simulated results returned by the mode_wrapper used
\item obs_list: the list of observations as given to estim_param function
\item param_values: a named vector containing the current parameters values proposed
by the estimation algorithm
\item model_options: the list of model options as given to estim_param function
It must return a list of observations (same format as \code{obs_list} argument) that
will be used to compute the criterion to optimize.
}

The optional argument \code{transform_sim} must be a function with 4 arguments:
\itemize{
\item model_results: the list of simulated results returned by the mode_wrapper used
\item obs_list: the list of observations as given to estim_param function
\item param_values: a named vector containing the current parameters values proposed
by the estimation algorithm
\item model_options: the list of model options as given to estim_param function
It must return a list of simulated results (same format as this returned by the model wrapper used)
that will be used to compute the criterion to optimize.
}

The optional argument \code{satisfy_par_const} must be a function with 2 arguments:
\itemize{
\item param_values: a named vector containing the current parameters values proposed
by the estimation algorithm
\item model_options: the list of model options as given to estim_param function
It must return a logical indicating if the parameters values satisfies the constraints
(freely defined by the user in the function body) or not.
}

The optional argument \code{forced_param_values} may contain arithmetic expressions to
automatically compute the values of some parameters in function of the values of
parameters that are estimated (equality constraints). For that, \code{forced_param_values}
must be a named list. Arithmetic expressions must be R expressions given under the
shape of character strings. For example:

forced_param_values = list(p1=5, p2=7, p3="5*p5+p6")

will pass to the model wrapper the value 5 for parameter p1, 7 for parameter p2,
and will dynamically compute the value of p3 in function of the values of parameters
p5 and p6 iteratively provided by the parameter estimation algorithm.
}
\seealso{
For more details and examples, see the different vignettes in
\href{https://sticsrpacks.github.io/CroptimizR/}{CroptimizR website}
}
