devtools::install_github("SticsRPacks/SticsOptimizR")
library("SticsOptimizR")
}
if(!require("dplyr")){
install.packages("dplyr",repos="http://cran.irsn.fr")
library("dplyr")
}
if(!require("nloptr")){
install.packages("nloptr",repos="http://cran.irsn.fr")
library("nloptr")
}
if(!require("DiceDesign")){
install.packages("DiceDesign",repos="http://cran.irsn.fr")
library("DiceDesign")
}
if(!require("doParallel")){
install.packages("doParallel",repos="http://cran.irsn.fr")
library("doParallel")
}
# Define the paths to the needed tools and data
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
# Set the random generation seed => each run of this script without any modification should give the same results
set.seed(1234)
sit_name="bo96iN+"  ## among bo96iN+, bou00t1, bou00t3, bou99t1, bou99t3,
## lu96iN+, lu96iN6 or lu97iN+
var_name="lai_n"    ## lai_n or masec_n
# Set the model options (see '? stics_wrapper_options' for details)
model_options=stics_wrapper_options(params$stics_path,data_dir,
parallel=FALSE)
# Run the model (on all situations found in data_dir)
sim_before_optim=stics_wrapper(model_options=model_options)
getwd()
library(SticsOptimizR)
nlo
load("~/R/win-library/3.5/SticsOptimizR/extdata/TestCase1c/optim_results.Rdata")
nlo
library(SticsOptimizR)
? png
library(SticsOptimizR)
library(SticsOptimizR)
install.packages("staplr")
library(staplr)
install.packages("staplr")
is.element(c(1,2,3),c(3,4,5))
? main_optim
library(SticsRFiles)
library(SticsOnR)
library(SticsOptimizR)
library(dplyr)
library(nloptr)
library(DiceDesign)
library("doParallel")
prior_information=list()
prior_information$dlaimax=list(sit_list=list(c("bou99t3", "bou00t3", "bou99t1", "bou00t1", "bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+")),lb=0.0005,ub=0.0025)
prior_information$durvieF=list(sit_list=list(c("bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+"), c("bou99t3", "bou00t3", "bou99t1", "bou00t1")),lb=c(50,50),ub=c(400,400))
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir, parallel=TRUE)
optim_options=list()
optim_options$nb_rep=2                              # How many times we run the minimization with different parameters
optim_options$xtol_rel=1e-05                        # Tolerance criterion between two iterations
optim_options$maxeval=3                             # Maximum number of iterations executed by the function
optim_options$path_results=model_options$data_dir   # path where to store results graphs
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"))
main_optim(obs_list=obs_list,crit_function=concentrated_wss,model_function=stics_wrapper,model_options=model_options,optim_options=optim_options,prior_information=prior_information)
list_vars
obs_list
list_vars=lapply(situations, function (x) intersect(colnames(sim_list[[x]]),colnames(obs_list[[x]])))
list_dates
prior_information=list()
prior_information$dlaimax=list(sit_list=list(c("bou99t3", "bou00t3", "bou99t1", "bou00t1", "bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+")),lb=0.0005,ub=0.0025)
prior_information$durvieF=list(sit_list=list(c("bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+"), c("bou99t3", "bou00t3", "bou99t1", "bou00t1")),lb=c(50,50),ub=c(400,400))
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir, parallel=TRUE)
optim_options=list()
optim_options$nb_rep=2                              # How many times we run the minimization with different parameters
optim_options$xtol_rel=1e-05                        # Tolerance criterion between two iterations
optim_options$maxeval=3                             # Maximum number of iterations executed by the function
optim_options$path_results=model_options$data_dir   # path where to store results graphs
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"))
main_optim(obs_list=obs_list,crit_function=concentrated_wss,model_function=stics_wrapper,model_options=model_options,optim_options=optim_options,prior_information=prior_information)
is.vector(situations)
situations
intersect(colnames(sim_list[["bo96iN+"]]),colnames(obs_list[["bo96iN+"]]))
is.vector(intersect(colnames(sim_list[["bo96iN+"]]),colnames(obs_list[["bo96iN+"]])))
list_vars
Q
prior_information=list()
prior_information$dlaimax=list(sit_list=list(c("bou99t3", "bou00t3", "bou99t1", "bou00t1", "bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+")),lb=0.0005,ub=0.0025)
prior_information$durvieF=list(sit_list=list(c("bo96iN+", "lu96iN+", "lu96iN6", "lu97iN+"), c("bou99t3", "bou00t3", "bou99t1", "bou00t1")),lb=c(50,50),ub=c(400,400))
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir, parallel=TRUE)
optim_options=list()
optim_options$nb_rep=2                              # How many times we run the minimization with different parameters
optim_options$xtol_rel=1e-05                        # Tolerance criterion between two iterations
optim_options$maxeval=3                             # Maximum number of iterations executed by the function
optim_options$path_results=model_options$data_dir   # path where to store results graphs
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"))
main_optim(obs_list=obs_list,crit_function=concentrated_wss,model_function=stics_wrapper,model_options=model_options,optim_options=optim_options,prior_information=prior_information)
list_vars=lapply(situations, function (x) intersect(colnames(sim_list[[x]]),colnames(obs_list[[x]])))
list_vars
library(SticsOptimizR)
library(SticsOptimizR)
? png
library(SticsOptimizR)
? list.files
load("~/GitHub/SticsOptimizR/vignettes/ResultsSimpleCase/optim_results.Rdata")
nlo
nlo[[3]]
get.seed
get.seed()
install.packages("varComp")
.Random.seed
set.seed(1234)
.Random.seed
set.seed(5)
.Random.seed
.Random.seed
set.seed(423)
runif(3)
runfi(3)
runif(3)
set.seed(423)
runif(3)
set.seed(4231)
runif(3)
unlink('vignettes/Parameter estimation simple case_cache', recursive = TRUE)
library(SticsOptimizR)
library(SticsOptimizR)
library(SticsOptimizR)
? rand_seed
library(SticsOptimizR)
source('~/DOC/BIBLIO - RESSOURCES - NOTES/R/getSeed.r')
set.seed(1234)
test = rnorm(30)
find.seed(test)
set.seed(12456)
test = rnorm(30)
set.seed(12456)
test = rnorm(30)
find.seed(test)
set.seed(1245656)
test = rnorm(30)
find.seed(test)
set.seed(156)
test = rnorm(30)
find.seed(test)
source('~/DOC/BIBLIO - RESSOURCES - NOTES/R/getSeed.r')
library(SticsOptimizR)
? lhsdesign
? lhsDesign
library(DiceDesign)
? lhsDesign
library(SticsOptimizR)
library(SticsOptimizR)
load("~/R/win-library/3.5/SticsOptimizR/extdata/TestCase1c/optim_results.Rdata")
nlo[[2]]
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
devtools::build_vignettes()
devtools::build_vignettes()
install.packages("devtools")
library(devtools)
devtools::build_vignettes()
pkgdown::build_site()
devtools::build_vignettes()
library(SticsOptimizR)
? main_optim
library(SticsOptimizR)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
NROW(c())
NROW(c(1,2,3))
a=c(1,2,3)
names(a)=c("A1","A2","A3")
NROW(a
)
a
NCOL(a)
NROW(NULL)
a
NROW(a)
NROW(as.matrix(a))
as.matrix(a)
? as.matrix
length(a)
b=c(1,2,3,4,5,6)
b=as.matrix(b,nrow=2)
b
b=as.matrix(b,nrow=2,ncol=3)
b
c=as.matrix(b,nrow=2,ncol=3)
c
b
c=as.data.frame(b,nrow=2,ncol=3)
c
c=data.frame(b,nrow=2,ncol=3)
c
c=matrix(b,nrow=2,ncol=3)
c
c=matrix(b,nrow=2)
c
library(SticsOptimizR)
? main_optim
library(SticsRFiles)
library(SticsOnR)
library(SticsOptimizR)
library(dplyr)
library(nloptr)
library(DiceDesign)
library("doParallel")
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 2 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
# Run the model after optimzation
sim_after_optim=stics_wrapper(param_values=param_est_values,model_options=model_options)
# Plot the results
dev.new()
par(mfrow = c(1,2))
Ymax=max(max(obs_list[[sit_name]][,var_name], na.rm=TRUE),
max(sim_before_optim$sim_list[[sit_name]][,var_name], na.rm=TRUE))
plot(sim_before_optim$sim_list[[sit_name]][,c("Date",var_name)],type="l",
main="Before optimization",ylim=c(0,Ymax+Ymax*0.1))
points(obs_list[[sit_name]],col="green")
plot(sim_after_optim$sim_list[[sit_name]][,c("Date",var_name)],type="l",
main="After optimization",ylim=c(0,Ymax+Ymax*0.1))
points(obs_list[[sit_name]],col="green")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
names(NULL)
library(SticsOptimizR)
library(SticsRFiles)
library(SticsOnR)
library(SticsOptimizR)
library(dplyr)
library(nloptr)
library(DiceDesign)
library("doParallel")
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 2 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
optim_options$path_results
optim_options$init_values=c(0.0006,398)
names(optim_options$init_values)=c("dlaimax","durvieF")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
library(SticsOptimizR)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
library(SticsOptimizR)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
optim_options$init_values
matrix(optim_options$init_values,
ncol=names(optim_options$init_values))
names(optim_options$init_values
)
library(SticsOptimizR)
library(SticsRFiles)
library(SticsOnR)
library(SticsOptimizR)
library(dplyr)
library(nloptr)
library(DiceDesign)
library("doParallel")
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 2 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
library(SticsOptimizR)
library(SticsRFiles)
library(SticsOnR)
library(SticsOptimizR)
library(dplyr)
library(nloptr)
library(DiceDesign)
library("doParallel")
sit_name="bo96iN+"
var_name="lai_n"
# Run the model before optimization for a prior evaluation
stics_path="D:/Home/sbuis/Documents/WORK/STICS/JavaSTICS-1.41-stics-9.0/bin/stics_modulo"  # TO ADAPT TO YOUR CASE :-) ###
data_dir=system.file(file.path("extdata","TestCase1c"), package = "SticsOptimizR")
model_options=stics_wrapper_options(stics_path,data_dir,parallel=FALSE)
sim_before_optim=stics_wrapper(model_options=model_options)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 2 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
optim_options$init_values=c(0.0006,398)
names(optim_options$init_values)=c("dlaimax","durvieF")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 5 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
optim_options$init_values=c(0.0006,398)
names(optim_options$init_values)=c("dlaimax","durvieF")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 2 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
obs_list=read_obs_to_list(file.path(model_options$data_dir,"Orig Data"),
obs_filenames = paste0(sit_name,".obs"))
obs_list[[sit_name]]=obs_list[[sit_name]][,c("Date",var_name)]
# Set prior information on the parameters to estimate
prior_information=list(lb=c(dlaimax=0.0005, durvieF=50),
ub=c(dlaimax=0.0025, durvieF=400))
# Set options for the parameter estimation method
optim_options=list()
optim_options$nb_rep <- 1 # How many times we run the minimization with different parameters
optim_options$xtol_rel <- 1e-05 # Tolerance criterion between two iterations
optim_options$maxeval <- 20 # Maximum number of iterations executed by the function
optim_options$path_results <- model_options$data_dir # path where to store results graphs
# Run the optimization
optim_options$init_values=c(0.0006,398)
names(optim_options$init_values)=c("dlaimax","durvieF")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
library(SticsOptimizR)
optim_options$init_values=c(0.0006,398)
names(optim_options$init_values)=c("dlaimax","durvieF")
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
init_values
init_values
irep
init_values[irep,]
is.matrix(init_values)
library(SticsOptimizR)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
sample_sz
init_values
complem_init_values
init_values
init_values[,]
init_values[1,]
is.matrix(init_values)
library(SticsOptimizR)
param_est_values=main_optim(obs_list=obs_list,crit_function=concentrated_wss,
model_function=stics_wrapper,
model_options=model_options,
optim_options=optim_options,
prior_information=prior_information)
devtools::build_vignettes()
pkgdown::build_site()
library(SticsOptimizR)
